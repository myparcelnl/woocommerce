$spacers: (
  0: 0,
  1: 0.25em,
  2: 0.5em,
  3: 0.75em,
);

$directions: (left, top, right, bottom);

/*
 * Generates helpers.
 *
 * The key of the outer map is the base property.
 *
 * alias             Will be used in the class instead of the full property if set.
 * variants          Simple values.
 * directionVariants Values that will be set for left, top, right and bottom.
 */
$helpers: (
  // Example: Creates .wcmp__d--<variant> { display: <variant> } for each entry in variants.
  display: (
    alias: d,
    variants: (
      none,
      block,
      inline-block,
      flex,
    ),
  ),
  margin: (
    alias: m,
    variants: (auto),
    directionVariants: $spacers
  ),
  padding: (
    alias: p,
    directionVariants: $spacers,
  ),
  white-space: (
    alias: ws,
    variants: (
      nowrap,
    ),
  ),
  text-align: (
    alias: text,
    variants: $directions
  )
);

// This just renders everything. Only edit above map if you want to change the available helpers.
.wcmp {
  @each $property, $options in $helpers {
    $alias: map-get($options, 'alias') or $property;

    // Create "normal" variants. For example "m--auto".
    @if map-has-key($options, 'variants') {
      $variants: map-get($options, 'variants');
      $isMap: type-of($variants) == 'map';

      &__#{$alias} {
        @each $key, $type in $variants {
          @if $isMap == false {
            $type: $key;
          }

          &--#{$key} {
            #{$property}: $type !important;
          }
        }
      }
    }

    // Create each direction, for example "ml--2, mt--2, mr--2, mb--2"
    @if map-has-key($options, 'directionVariants') {
      $directionVariants: map-get($options, 'directionVariants');
      $isMap: type-of($directionVariants) == 'map';

      @each $direction in $directions {
        &__#{$alias + str-slice($direction, 1,1)} {
          @each $key, $type in $directionVariants {
            @if $isMap == false {
              $type: $key;
            }

            &--#{$key} {
              #{$property + '-' + $direction}: $type !important;
            }
          }
        }
      }
    }
  }
}
